// Generated by CoffeeScript 1.3.3
var auth;

auth = module.exports = {};

/*
`regexp` is a regexp for matching a document name
(a regular expresson, or a string converted to a regexp that
matches only that string). `type` is a string
corresponding to the action types: `connect`, `create`,
`update`, `read` or `delete`.
*/


auth.use = function(regexp, fn, type) {
  if (type == null) {
    type = null;
  }
  if (typeof regexp === "string") {
    regexp = new RegExp("^" + regexp + "$");
  } else if (regexp instanceof Function) {
    fn = regexp;
    regexp = null;
  }
  this.stack.push({
    regexp: regexp,
    type: type,
    handle: fn
  });
  return this;
};

auth.CREATE = function(regexp, fn) {
  return this.use(regexp, fn, "create");
};

auth.CONNECT = function(regexp, fn) {
  return this.use(regexp, fn, "connect");
};

auth.UPDATE = function(regexp, fn) {
  return this.use(regexp, fn, "update");
};

auth.READ = function(regexp, fn) {
  return this.use(regexp, fn, "read");
};

auth.DELETE = function(regexp, fn) {
  return this.use(regexp, fn, "delete");
};

auth.handle = function(agent, action, out) {
  var index, next, stack;
  stack = this.stack;
  index = 0;
  next = function(err) {
    var arity, docName, layer;
    layer = stack[index++];
    if (action.responded) {
      return;
    } else if (!layer) {
      if (out) {
        return out(err);
      }
      return action.reject();
    }
    try {
      docName = action.docName;
      if (layer.regexp && (!(docName != null) || !layer.regexp.test(docName))) {
        return next(err);
      }
      if (layer.type && layer.type !== action.type) {
        return next(err);
      }
      arity = layer.handle.length;
      if (err) {
        if (arity === 4) {
          return layer.handle(err, agent, action, next);
        } else {
          return next(err);
        }
      } else if (arity < 4) {
        return layer.handle(agent, action, next);
      } else {
        return next();
      }
    } catch (e) {
      console.log('found error', e);
      return next(e);
    }
  };
  return next();
};
